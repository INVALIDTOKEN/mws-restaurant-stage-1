class DBHelper{static get DATABASE_URL(){const port=1337
  return `http://localhost:${port}/restaurants`}
  static getIDB(){return idb.open("restaurant-app",1,(upgradeDB)=>{let restaurantStore=upgradeDB.createObjectStore("allRestaurants")})}
  static restaurantFromIDB(dbPromise){return dbPromise.then((db)=>{let tx=db.transaction("allRestaurants");var keyValStore=tx.objectStore("allRestaurants");return keyValStore.get("restaurantArray")})}
  static updateIDB(restaurantArray,dbPromise){return dbPromise.then(function(db){let tx=db.transaction('allRestaurants','readwrite');let restaurantsStore=tx.objectStore('allRestaurants');restaurantsStore.put(restaurantArray,'restaurantArray');tx.complete})}
  static fetchRestaurants(callback){let IDBPromise=DBHelper.getIDB();DBHelper.restaurantFromIDB(IDBPromise).then((restaurantArr)=>{console.log("[IDB] THE VALUE OF 'restaurantArr' : ");console.log(restaurantArr);if(!restaurantArr){console.log("[FETCH] RESPONSE MADE FROM SERVER");return fetch(DBHelper.DATABASE_URL)}else if(restaurantArr&&restaurantArr.length>0){console.log("[IDB] RESPONSE MADE FROM INDEXDB");callback(null,restaurantArr);return}}).then((response)=>{console.log(response);if(typeof response=="undefined"){return}else if(response.status!=200){return}else{return response.json()}}).then((restaurantArr)=>{if(typeof restaurantArr=="undefined"){return}else{console.log("[IDB] UPDATING RESPONSE IN THE DATABASE");let lastObj=restaurantArr[restaurantArr.length-1];lastObj.photograph=""+lastObj.id;DBHelper.updateIDB(restaurantArr,IDBPromise);callback(null,restaurantArr);return}})}
  static fetchRestaurantById(id,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null)}else{const restaurant=restaurants.find(r=>r.id==id);if(restaurant){callback(null,restaurant)}else{callback('Restaurant does not exist',null)}}})}
  static fetchRestaurantByCuisine(cuisine,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null)}else{const results=restaurants.filter(r=>r.cuisine_type==cuisine);callback(null,results)}})}
  static fetchRestaurantByNeighborhood(neighborhood,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null)}else{const results=restaurants.filter(r=>r.neighborhood==neighborhood);callback(null,results)}})}
  static fetchRestaurantByCuisineAndNeighborhood(cuisine,neighborhood,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null)}else{let results=restaurants
  if(cuisine!='all'){results=results.filter(r=>r.cuisine_type==cuisine)}
  if(neighborhood!='all'){results=results.filter(r=>r.neighborhood==neighborhood)}
  callback(null,results)}})}
  static fetchNeighborhoods(callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null)}else{const neighborhoods=restaurants.map((v,i)=>restaurants[i].neighborhood)
  const uniqueNeighborhoods=neighborhoods.filter((v,i)=>neighborhoods.indexOf(v)==i)
  callback(null,uniqueNeighborhoods)}})}
  static fetchCuisines(callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null)}else{const cuisines=restaurants.map((v,i)=>restaurants[i].cuisine_type)
  const uniqueCuisines=cuisines.filter((v,i)=>cuisines.indexOf(v)==i)
  callback(null,uniqueCuisines)}})}
  static urlForRestaurant(restaurant){return(`./restaurant.html?id=${restaurant.id}`)}
  static imageUrlForRestaurant(restaurant){return(`/img/${restaurant.photograph}.jpg`)}
  static mapMarkerForRestaurant(restaurant,map){const marker=new L.marker([restaurant.latlng.lat,restaurant.latlng.lng],{title:restaurant.name,alt:restaurant.name,url:DBHelper.urlForRestaurant(restaurant)})
  marker.addTo(newMap);return marker}}